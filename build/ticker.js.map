{"version":3,"sources":["../src/ticker.js"],"names":["createTicker","dispatch","getState","name","fn","opts","isStopped","removeAfterStop","times","options","interval","maxTimes","data","job","progress","p","stopFn","b","state","background","clearTimeout","timeoutId","executor","scheduler","Date","now","err","value","shouldStop","setTimeout"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA,IAAMA,eAAe,SAAfA,YAAe,CAACC,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BC,EAA3B;AAAA,MAA+BC,IAA/B,uEAAsC,EAAtC;AAAA,SAA6C,YAAM;AACtE,QAAIC,YAAY,KAAhB;AACA,QAAIC,kBAAkB,KAAtB;AACA,QAAIC,QAAQ,CAAZ;;AAEA,QAAMC;AACJC,gBAAU,IADN;AAEJC,gBAAU,CAFN;AAGJC,YAAM;AAHF,OAIDP,IAJC,CAAN;AALsE,QAW9DK,QAX8D,GAWjCD,OAXiC,CAW9DC,QAX8D;AAAA,QAWpDC,QAXoD,GAWjCF,OAXiC,CAWpDE,QAXoD;AAAA,QAW1CC,IAX0C,GAWjCH,OAXiC,CAW1CG,IAX0C;;;AAatE,QAAMC,MAAM;AACVV,gBADU;AAEVS,gBAFU;AAGVF,wBAHU;AAIVC,wBAJU;AAKVG,cALU,oBAKDC,CALC,EAKE;AACVd,iBAAS,0BAAYE,IAAZ,EAAkBY,CAAlB,CAAT;AACD;AAPS,KAAZ;;AAUA,QAAMC,SAAS,SAATA,MAAS,CAACC,CAAD,EAAO;AACpBX,kBAAY,IAAZ;AACAC,wBAAkBU,CAAlB;AACA,UAAIA,CAAJ,EAAO;AACL,YAAMC,QAAQhB,UAAd;AACA,YAAIgB,MAAMC,UAAN,CAAiBhB,IAAjB,CAAJ,EAA4B;AAC1BiB,uBAAaF,MAAMC,UAAN,CAAiBhB,IAAjB,EAAuBkB,SAApC;AACD;AACF;AACF,KATD;AAUA,QAAMC,WAAW,wBAAelB,EAAf,EAAmBS,GAAnB,EAAwBZ,QAAxB,EAAkCC,QAAlC,CAAjB;AACA,QAAMqB,YAAY,SAAZA,SAAY,GAAM;AACtBtB,eAAS,yBAAWE,IAAX,EAAiBqB,KAAKC,GAAL,EAAjB,CAAT;AACAH,eAAS,UAACI,GAAD,EAAMC,KAAN,EAAgB;AACvB;AACAnB,iBAAS,CAAT;;AAEA;AACA,YAAI,CAACF,SAAL,EAAgB;AACdL,mBAAS,0BAAYE,IAAZ,EAAkBuB,GAAlB,EAAuBC,KAAvB,EAA8BH,KAAKC,GAAL,EAA9B,EAA0CjB,KAA1C,CAAT;AACD;;AAED;AACA,YAAMoB,aAAatB,aAAcK,YAAYH,SAASG,QAAtD;AACA,YAAIiB,UAAJ,EAAgB;AACd,cAAIrB,eAAJ,EAAqB;AACnBN,qBAAS,wBAAUE,IAAV,CAAT;AACD,WAFD,MAEO;AACLF,qBAAS,yBAAWE,IAAX,CAAT;AACD;AACF,SAND,MAMO;AACL,cAAMkB,aAAYQ,WAAWN,SAAX,EAAsBb,QAAtB,CAAlB;AACAT,mBAAS,2BAAaE,IAAb,EAAmBkB,UAAnB,CAAT;AACD;AACF,OArBD;AAsBD,KAxBD;;AA0BA;AACApB,aAAS,uBAASE,IAAT,EAAe,EAAEO,kBAAF,EAAYC,kBAAZ,EAAf,CAAT;;AAEA;AACA,QAAMU,YAAYQ,WAAWN,SAAX,EAAsB,CAAtB,CAAlB;AACAtB,aAAS,2BAAaE,IAAb,EAAmBkB,SAAnB,CAAT;;AAEA;AACA,WAAOL,MAAP;AACD,GArEoB;AAAA,CAArB;;kBAuEehB,Y","file":"ticker.js","sourcesContent":["import createExecutor from './executor';\nimport { jobAdded, jobStarted, jobProgress, jobFinished, jobStopped, removeJob, jobTimeoutId } from './actions';\n\nconst createTicker = (dispatch, getState, name, fn, opts = {}) => () => {\n  let isStopped = false;\n  let removeAfterStop = false;\n  let times = 0;\n\n  const options = {\n    interval: 1000,\n    maxTimes: 1,\n    data: null,\n    ...opts,\n  };\n  const { interval, maxTimes, data } = options;\n\n  const job = {\n    name,\n    data,\n    interval,\n    maxTimes,\n    progress(p) {\n      dispatch(jobProgress(name, p));\n    },\n  };\n\n  const stopFn = (b) => {\n    isStopped = true;\n    removeAfterStop = b;\n    if (b) {\n      const state = getState();\n      if (state.background[name]) {\n        clearTimeout(state.background[name].timeoutId);\n      }\n    }\n  };\n  const executor = createExecutor(fn, job, dispatch, getState);\n  const scheduler = () => {\n    dispatch(jobStarted(name, Date.now()));\n    executor((err, value) => {\n      // Increment the times\n      times += 1;\n\n      // Notify about the jobFinished\n      if (!isStopped) {\n        dispatch(jobFinished(name, err, value, Date.now(), times));\n      }\n\n      // See if we should stopJob\n      const shouldStop = isStopped || (maxTimes && times >= maxTimes);\n      if (shouldStop) {\n        if (removeAfterStop) {\n          dispatch(removeJob(name));\n        } else {\n          dispatch(jobStopped(name));\n        }\n      } else {\n        const timeoutId = setTimeout(scheduler, interval);\n        dispatch(jobTimeoutId(name, timeoutId));\n      }\n    });\n  };\n\n  // Notify that we added the job\n  dispatch(jobAdded(name, { interval, maxTimes }));\n\n  // Start the ticker\n  const timeoutId = setTimeout(scheduler, 0);\n  dispatch(jobTimeoutId(name, timeoutId));\n\n  // Return stopJob function\n  return stopFn;\n};\n\nexport default createTicker;\n"]}