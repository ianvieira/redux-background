{"version":3,"sources":["../src/ticker.js"],"names":["createTicker","dispatch","getState","name","fn","opts","isStopped","removeAfterStop","times","options","interval","maxTimes","data","job","progress","p","stopFn","b","executor","scheduler","Date","now","err","value","shouldStop","setTimeout"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA,IAAMA,eAAe,SAAfA,YAAe,CAACC,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BC,EAA3B;AAAA,MAA+BC,IAA/B,uEAAsC,EAAtC;AAAA,SAA6C,YAAM;AACtE,QAAIC,YAAY,KAAhB;AACA,QAAIC,kBAAkB,KAAtB;AACA,QAAIC,QAAQ,CAAZ;;AAEA,QAAMC;AACJC,gBAAU,IADN;AAEJC,gBAAU,CAFN;AAGJC,YAAM;AAHF,OAIDP,IAJC,CAAN;AALsE,QAW9DK,QAX8D,GAWjCD,OAXiC,CAW9DC,QAX8D;AAAA,QAWpDC,QAXoD,GAWjCF,OAXiC,CAWpDE,QAXoD;AAAA,QAW1CC,IAX0C,GAWjCH,OAXiC,CAW1CG,IAX0C;;;AAatE,QAAMC,MAAM;AACVV,gBADU;AAEVS,gBAFU;AAGVF,wBAHU;AAIVC,wBAJU;AAKVG,cALU,oBAKDC,CALC,EAKE;AACVd,iBAAS,0BAAYE,IAAZ,EAAkBY,CAAlB,CAAT;AACD;AAPS,KAAZ;;AAUA,QAAMC,SAAS,SAATA,MAAS,CAACC,CAAD,EAAO;AAAEX,kBAAY,IAAZ,CAAkBC,kBAAkBU,CAAlB;AAAsB,KAAhE;AACA,QAAMC,WAAW,wBAAed,EAAf,EAAmBS,GAAnB,EAAwBZ,QAAxB,EAAkCC,QAAlC,CAAjB;AACA,QAAMiB,YAAY,SAAZA,SAAY,GAAM;AACtBlB,eAAS,yBAAWE,IAAX,EAAiBiB,KAAKC,GAAL,EAAjB,CAAT;AACAH,eAAS,UAACI,GAAD,EAAMC,KAAN,EAAgB;AACvB;AACAf,iBAAS,CAAT;;AAEA;AACA,YAAI,CAACF,SAAL,EAAgB;AACdL,mBAAS,0BAAYE,IAAZ,EAAkBmB,GAAlB,EAAuBC,KAAvB,EAA8BH,KAAKC,GAAL,EAA9B,EAA0Cb,KAA1C,CAAT;AACD;;AAED;AACA,YAAMgB,aAAalB,aAAcK,YAAYH,SAASG,QAAtD;AACA,YAAIa,UAAJ,EAAgB;AACd,cAAIjB,eAAJ,EAAqB;AACnBN,qBAAS,wBAAUE,IAAV,CAAT;AACD,WAFD,MAEO;AACLF,qBAAS,yBAAWE,IAAX,CAAT;AACD;AACF,SAND,MAMO;AACLsB,qBAAWN,SAAX,EAAsBT,QAAtB;AACD;AACF,OApBD;AAqBD,KAvBD;;AAyBA;AACAT,aAAS,uBAASE,IAAT,EAAe,EAAEO,kBAAF,EAAYC,kBAAZ,EAAf,CAAT;;AAEA;AACAc,eAAWN,SAAX,EAAsB,CAAtB;;AAEA;AACA,WAAOH,MAAP;AACD,GA1DoB;AAAA,CAArB;;kBA4DehB,Y","file":"ticker.js","sourcesContent":["import createExecutor from './executor';\nimport { jobAdded, jobStarted, jobProgress, jobFinished, jobStopped, removeJob } from './actions';\n\nconst createTicker = (dispatch, getState, name, fn, opts = {}) => () => {\n  let isStopped = false;\n  let removeAfterStop = false;\n  let times = 0;\n\n  const options = {\n    interval: 1000,\n    maxTimes: 1,\n    data: null,\n    ...opts,\n  };\n  const { interval, maxTimes, data } = options;\n\n  const job = {\n    name,\n    data,\n    interval,\n    maxTimes,\n    progress(p) {\n      dispatch(jobProgress(name, p));\n    },\n  };\n\n  const stopFn = (b) => { isStopped = true; removeAfterStop = b; };\n  const executor = createExecutor(fn, job, dispatch, getState);\n  const scheduler = () => {\n    dispatch(jobStarted(name, Date.now()));\n    executor((err, value) => {\n      // Increment the times\n      times += 1;\n\n      // Notify about the jobFinished\n      if (!isStopped) {\n        dispatch(jobFinished(name, err, value, Date.now(), times));\n      }\n\n      // See if we should stopJob\n      const shouldStop = isStopped || (maxTimes && times >= maxTimes);\n      if (shouldStop) {\n        if (removeAfterStop) {\n          dispatch(removeJob(name));\n        } else {\n          dispatch(jobStopped(name));\n        }\n      } else {\n        setTimeout(scheduler, interval);\n      }\n    });\n  };\n\n  // Notify that we added the job\n  dispatch(jobAdded(name, { interval, maxTimes }));\n\n  // Start the ticker\n  setTimeout(scheduler, 0);\n\n  // Return stopJob function\n  return stopFn;\n};\n\nexport default createTicker;\n"]}